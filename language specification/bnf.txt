#人間が目で見るようなので、エスケープとか適当な正規表現があるよ

<PROGRAM> := (<IMPORT> | <EXPRESSION>)*

<IDENTIFY> := [a-zA-Z_][a-zA-Z0-9_]*

<MODULE_NAME> := <IDENTIFY>(::<IDENTIFY>)*

<IMPORT> := import <MODULE_NAME> (as <IDENTIFY>)?

<INTEGER> := [0-9]([0-9_]*[0-9])?
<BIN_INTEGER> := 0b[0-1]([0-1_]*[0-1])?
<OCT_INTEGER> := 0o[0-7]([0-7_]*[0-7])?
<HEX_INTEGER> := 0x[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?
<TYPED_INTEGER> := <INTEGER>(i | u)[0-9]+
<TYPED_BIN_INTEGER> := <BIN_INTEGER>(i | u)[0-9]+
<TYPED_OCT_INTEGER> := <OCT_INTEGER>(i | u)[0-9]+
<TYPED_HEX_INTEGER> := <HEX_INTEGER>(i | u)[0-9]+

<INTEGER_LITERAL> := <INTEGER> | <BIN_INTEGER> | <OCT_INTEGER> | <HEX_INTEGER> | <TYPED_INTEGER> | <TYPED_BIN_INTEGER> | <TYPED_OCT_INTEGER> | <TYPED_HEX_INTEGER>

<FLOAT> := <INTEGER>\.<INTEGER>((e | E)(+ | -)<INTEGER>)?
<TYPED_FLOAT> := <FLOAT>f[0-9]+

<FLOAT_LITERAL> := <FLOAT> | <TYPED_FLOAT>

<STRING> := ".*"

<VARIABLE> := <IDENTIFY>

<PARENTHESIS_EXPRESSION> := (<EXPRESSION>)

<PRIMARY> := <INTEGER_LITERAL> | <FLOAT_LITERAL> | <STRING> | <VARIABLE> | <PARENTHESIS_EXPRESSION>

<MEM_SELECT> := <EXPRESSION> \. <EXPRESSION>
<ARRAY_INDEX> := <EXPRESSION>\[<EXPRESSION>\]
<FN_CALL> := <EXPRESSION>\((<EXPRESSION> (, <EXPRESSION>)*)?\)
<INC_SUFFIX> := <EXPRESSION>++
<DEC_SUFFIX> := <EXPRESSION>--
<OP_GROUP1> := <EXPRESSION> | <MEM_SELECT> | <ARRAY_INDEX> | <FN_CALL> | <INC_SUFFIX> | <DEC_SUFFIX>

<BIT_NOT> := ~<OP_GROUP1>
<LOG_NOT> := !<OP_GROUP1>
<NIMUS> := -<OP_GROUP1>
<PLUS> := +<OP_GROUP1>
<INC_PREFIX> := ++<OP_GROUP1>
<DEC_PREFIX> := --<OP_GROUP1>
<OP_GROUP2> := <OP_GROUP1> | <BIT_NOT> | <LOG_NOT> | <NIMUS> | <PLUS> | <INC_PREFIX> | <DEC_PREFIX>

<MUL> := <OP_GROUP2> * <OP_GROUP2>
<DIV> := <OP_GROUP2> / <OP_GROUP2>
<MOD> := <OP_GROUP2> % <OP_GROUP2>
<OP_GROUP3> := <OP_GROUP2> | <MUL> | <DIV> | <MOD>

<ADD> := <OP_GROUP3> + <OP_GROUP3>
<SUB> := <OP_GROUP3> - <OP_GROUP3>
<OP_GROUP4> := <OP_GROUP3> | <ADD> | <SUB>

<LSHIFT> := <OP_GROUP4> << <OP_GROUP4>
<RSHIFT> := <OP_GROUP4> >> <OP_GROUP4>
<OP_GROUP5> := <OP_GROUP4> | <LSHIFT> | <RSHIFT>

<LESS_THAN> := <OP_GROUP5> < <OP_GROUP5>
<GRATER_THAN> := <OP_GROUP5> > <OP_GROUP5>
<LESS_EQ> := <OP_GROUP5> <= <OP_GROUP5>
<GRATER_EQ> := <OP_GROUP5> >= <OP_GROUP5>
<OP_GROUP6> := <OP_GROUP5> | <LESS_THAN> | <GRATER_THAN> | <LESS_EQ> | <GRATER_EQ>

<EQUAL> := <OP_GROUP6> == <OP_GROUP6>
<NOT_EQUAL> := <OP_GROUP6> != <OP_GROUP6>
<OP_GROUP7> := <OP_GROUP6> | <EQUAL> | <NOT_EQUAL>

<BIT_AND> := <OP_GROUP7> & <OP_GROUP7>
<OP_GROUP8> := <OP_GROUP7> | <BIT_AND>

<BIT_XOR> := <OP_GROUP8> ^ <OP_GROUP8>
<OP_GROUP9> := <OP_GROUP8> | <BIT_XOR>

<BIT_OR> := <OP_GROUP9> \| <OP_GROUP9>
<OP_GROUP10> := <OP_GROUP9> | <BIT_OR>

<LOG_AND> := <OP_GROUP10> && <OP_GROUP10>
<OP_GROUP11> := <OP_GROUP10> | <LOG_AND>

<LOG_OR> := <OP_GROUP11> || <OP_GROUP11>
<OP_GROUP12> := <OP_GROUP11> | <LOG_OR>

<ASIGN> := <OP_GROUP12> = <OP_GROUP12>
<ADD_ASIGN> := <OP_GROUP12> += <OP_GROUP12>
<SUB_ASIGN> := <OP_GROUP12> -= <OP_GROUP12>
<MUL_ASIGN> := <OP_GROUP12> *= <OP_GROUP12>
<DIV_ASIGN> := <OP_GROUP12> /= <OP_GROUP12>
<MOD_ASIGN> := <OP_GROUP12> %= <OP_GROUP12>
<LSHIFT_ASIGN> := <OP_GROUP12> <<= <OP_GROUP12>
<RSHIFT_ASIGN> := <OP_GROUP12> >>= <OP_GROUP12>
<BIT_AND_ASIGN> := <OP_GROUP12> &= <OP_GROUP12>
<BIT_OR_ASIGN> := <OP_GROUP12> |= <OP_GROUP12>
<BIT_XOR_ASIGN> := <OP_GROUP12> ^= <OP_GROUP12>
<OP_GROUP13> := <OP_GROUP12> | <ASIGN> | <ADD_ASIGN> | <SUB_ASIGN> | <MUL_ASIGN> | <DIV_ASIGN> | <MOD_ASIGN> | <LSHIFT_ASIGN> | <RSHIFT_ASIGN> | <BIT_AND_ASIGN> | <BIT_OR_ASIGN> | <BIT_XOR_ASIGN>

<OP_GROUP_LATEST> := <OP_GROUP13>

<EXPRESSION> := <PRIMARY> | <OP_GROUP_LATEST>
