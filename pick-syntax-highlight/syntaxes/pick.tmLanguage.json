{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pick",
	"patterns": [
		{"include": "#comments"},
		{"include": "#keywords"},
		{"include": "#storages"},
		{"include": "#constants"},
		{"include": "#strings"},
		{"include": "#variables"}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.pick",
				"match": "\\b(if|else|while|for|loop|return)\\b"
			}]
		},
		"comments": {
			"patterns": [{
				"name": "comment.line.double-slash.pick",
				"match": "//.*"
			}]
		},
		"storages": {
			"patterns": [
				{
					"name": "storage.modifier.pick",
					"match": "\\b(pub|pri|extern|import)\\b"
				},
				{
					"match": "\\b(fn)\\b([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)?",
					"captures": {
						"1": {"name": "storage.type.pick"},
						"2": {"name": "entity.name.function.pick"}
					}
				},
				{
					"match": "\\b(ptr)\\s*<\\s*([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)\\s*>",
					"captures": {
						"1": {"name": "storage.type.pick"},
						"2": {"patterns": [
							{
								"include": "#storages"
							},
							{
								"name": "entity.name.class.pick",
								"match": ".*"
							}
						]}
					}
				},
				{
					"name": "storage.type.pick",
					"match": "\\bfn|void|i8|i16|i32|i64|u8|u16|u32|u64|bool|char|ptr\\b"
				},
				{
					"match": "\\b(class|struct)\\s+([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)?",
					"captures": {
						"1": {"name": "storage.type.pick"},
						"2": {"name": "entity.name.class.pick"}
					}
				},
				{
					"match": "\\b(new)\\s+([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)?",
					"captures": {
						"1": {"name": "keyword.control.pick"},
						"2": {"name": "entity.name.class.pick"}
					}
				},
				{
					"match": "\\b(type)\\s+([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)?",
					"captures": {
						"1": {"name": "storage.type.pick"},
						"2": {"name": "entity.name.type.pick"}
					}
				},
				{
					"match": "\\b(def|mut)\\s+([^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)?",
					"captures": {
						"1": {"name": "storage.type.pick"},
						"2": {"name": "variable.name.pick"}
					}
				},
				{
					"name": "entity.name.function.construct.pick",
					"match": "\\bconstruct\\b"
				},
				{
					"name": "entity.name.function.destruct.pick",
					"match": "\\bdestruct\\b"
				},
				{
					"match": "([^\\s!-@\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*)(\\(.*\\))",
					"captures": {
						"1": {"name": "entity.name.function.call.pick"},
						"2": {"patterns": [{"include": "$self"}]}
					}
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.int.pick",
					"match": "\\b\\d+(i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
				},
				{
					"name": "constant.numeric.float.pick",
					"match": "\\b\\d+(\\.\\d+)?(e(\\+|-)\\d+)?(f32|f64)?\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.pick",
					"begin": "\"",
					"end": "\"",
					"match": "\"[^\\n]*\"",
					"patterns": [
						{
							"name": "constant.character.escape.pick",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.pick",
					"match": "'\\\\?.'",
					"patterns": [
						{
							"name": "constant.character.escape.pick",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.interpolated.pick",
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"name": "constant.character.escape.pick",
							"match": "\\."
						}
					]
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.language.pick",
					"match": "\\b(true|false|this|self|pad|null)\\b"
				},
				{
					"name": "variable.name.pick",
					"match": "[^\\s!-?\\[-\\^`\\{-~][^\\s!-/:-?\\[-\\^`\\{-~]*"
				}
			]
		}
	},
	"scopeName": "source.pick"
}